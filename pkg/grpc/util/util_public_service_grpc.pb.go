// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: util/util_public_service.proto

package util

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UtilPublicServiceClient is the client API for UtilPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilPublicServiceClient interface {
	GetNodeTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeTimeResponse, error)
}

type utilPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilPublicServiceClient(cc grpc.ClientConnInterface) UtilPublicServiceClient {
	return &utilPublicServiceClient{cc}
}

func (c *utilPublicServiceClient) GetNodeTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeTimeResponse, error) {
	out := new(NodeTimeResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.UtilPublicService/GetNodeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilPublicServiceServer is the server API for UtilPublicService service.
// All implementations must embed UnimplementedUtilPublicServiceServer
// for forward compatibility
type UtilPublicServiceServer interface {
	GetNodeTime(context.Context, *emptypb.Empty) (*NodeTimeResponse, error)
	mustEmbedUnimplementedUtilPublicServiceServer()
}

// UnimplementedUtilPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUtilPublicServiceServer struct {
}

func (UnimplementedUtilPublicServiceServer) GetNodeTime(context.Context, *emptypb.Empty) (*NodeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeTime not implemented")
}
func (UnimplementedUtilPublicServiceServer) mustEmbedUnimplementedUtilPublicServiceServer() {}

// UnsafeUtilPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilPublicServiceServer will
// result in compilation errors.
type UnsafeUtilPublicServiceServer interface {
	mustEmbedUnimplementedUtilPublicServiceServer()
}

func RegisterUtilPublicServiceServer(s grpc.ServiceRegistrar, srv UtilPublicServiceServer) {
	s.RegisterService(&UtilPublicService_ServiceDesc, srv)
}

func _UtilPublicService_GetNodeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilPublicServiceServer).GetNodeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.UtilPublicService/GetNodeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilPublicServiceServer).GetNodeTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilPublicService_ServiceDesc is the grpc.ServiceDesc for UtilPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.grpc.UtilPublicService",
	HandlerType: (*UtilPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeTime",
			Handler:    _UtilPublicService_GetNodeTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "util/util_public_service.proto",
}
