// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: util/util_contract_status_service.proto

package util

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractStatusServiceClient is the client API for ContractStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractStatusServiceClient interface {
	ContractExecutionStatuses(ctx context.Context, in *ContractExecutionRequest, opts ...grpc.CallOption) (ContractStatusService_ContractExecutionStatusesClient, error)
	ContractsExecutionEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ContractStatusService_ContractsExecutionEventsClient, error)
}

type contractStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractStatusServiceClient(cc grpc.ClientConnInterface) ContractStatusServiceClient {
	return &contractStatusServiceClient{cc}
}

func (c *contractStatusServiceClient) ContractExecutionStatuses(ctx context.Context, in *ContractExecutionRequest, opts ...grpc.CallOption) (ContractStatusService_ContractExecutionStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContractStatusService_ServiceDesc.Streams[0], "/wavesenterprise.ContractStatusService/ContractExecutionStatuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractStatusServiceContractExecutionStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContractStatusService_ContractExecutionStatusesClient interface {
	Recv() (*ContractExecutionResponse, error)
	grpc.ClientStream
}

type contractStatusServiceContractExecutionStatusesClient struct {
	grpc.ClientStream
}

func (x *contractStatusServiceContractExecutionStatusesClient) Recv() (*ContractExecutionResponse, error) {
	m := new(ContractExecutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contractStatusServiceClient) ContractsExecutionEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ContractStatusService_ContractsExecutionEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContractStatusService_ServiceDesc.Streams[1], "/wavesenterprise.ContractStatusService/ContractsExecutionEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractStatusServiceContractsExecutionEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContractStatusService_ContractsExecutionEventsClient interface {
	Recv() (*ContractExecutionResponse, error)
	grpc.ClientStream
}

type contractStatusServiceContractsExecutionEventsClient struct {
	grpc.ClientStream
}

func (x *contractStatusServiceContractsExecutionEventsClient) Recv() (*ContractExecutionResponse, error) {
	m := new(ContractExecutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContractStatusServiceServer is the server API for ContractStatusService service.
// All implementations must embed UnimplementedContractStatusServiceServer
// for forward compatibility
type ContractStatusServiceServer interface {
	ContractExecutionStatuses(*ContractExecutionRequest, ContractStatusService_ContractExecutionStatusesServer) error
	ContractsExecutionEvents(*emptypb.Empty, ContractStatusService_ContractsExecutionEventsServer) error
	mustEmbedUnimplementedContractStatusServiceServer()
}

// UnimplementedContractStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContractStatusServiceServer struct {
}

func (UnimplementedContractStatusServiceServer) ContractExecutionStatuses(*ContractExecutionRequest, ContractStatusService_ContractExecutionStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method ContractExecutionStatuses not implemented")
}
func (UnimplementedContractStatusServiceServer) ContractsExecutionEvents(*emptypb.Empty, ContractStatusService_ContractsExecutionEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ContractsExecutionEvents not implemented")
}
func (UnimplementedContractStatusServiceServer) mustEmbedUnimplementedContractStatusServiceServer() {}

// UnsafeContractStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractStatusServiceServer will
// result in compilation errors.
type UnsafeContractStatusServiceServer interface {
	mustEmbedUnimplementedContractStatusServiceServer()
}

func RegisterContractStatusServiceServer(s grpc.ServiceRegistrar, srv ContractStatusServiceServer) {
	s.RegisterService(&ContractStatusService_ServiceDesc, srv)
}

func _ContractStatusService_ContractExecutionStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContractExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContractStatusServiceServer).ContractExecutionStatuses(m, &contractStatusServiceContractExecutionStatusesServer{stream})
}

type ContractStatusService_ContractExecutionStatusesServer interface {
	Send(*ContractExecutionResponse) error
	grpc.ServerStream
}

type contractStatusServiceContractExecutionStatusesServer struct {
	grpc.ServerStream
}

func (x *contractStatusServiceContractExecutionStatusesServer) Send(m *ContractExecutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContractStatusService_ContractsExecutionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContractStatusServiceServer).ContractsExecutionEvents(m, &contractStatusServiceContractsExecutionEventsServer{stream})
}

type ContractStatusService_ContractsExecutionEventsServer interface {
	Send(*ContractExecutionResponse) error
	grpc.ServerStream
}

type contractStatusServiceContractsExecutionEventsServer struct {
	grpc.ServerStream
}

func (x *contractStatusServiceContractsExecutionEventsServer) Send(m *ContractExecutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ContractStatusService_ServiceDesc is the grpc.ServiceDesc for ContractStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.ContractStatusService",
	HandlerType: (*ContractStatusServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ContractExecutionStatuses",
			Handler:       _ContractStatusService_ContractExecutionStatuses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContractsExecutionEvents",
			Handler:       _ContractStatusService_ContractsExecutionEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "util/util_contract_status_service.proto",
}
