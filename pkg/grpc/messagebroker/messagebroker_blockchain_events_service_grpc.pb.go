// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: messagebroker/messagebroker_blockchain_events_service.proto

package messagebroker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	events "wego/pkg/grpc/util/events"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainEventsServiceClient is the client API for BlockchainEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainEventsServiceClient interface {
	SubscribeOn(ctx context.Context, in *events.SubscribeOnRequest, opts ...grpc.CallOption) (BlockchainEventsService_SubscribeOnClient, error)
}

type blockchainEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainEventsServiceClient(cc grpc.ClientConnInterface) BlockchainEventsServiceClient {
	return &blockchainEventsServiceClient{cc}
}

func (c *blockchainEventsServiceClient) SubscribeOn(ctx context.Context, in *events.SubscribeOnRequest, opts ...grpc.CallOption) (BlockchainEventsService_SubscribeOnClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainEventsService_ServiceDesc.Streams[0], "/wavesenterprise.BlockchainEventsService/SubscribeOn", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainEventsServiceSubscribeOnClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainEventsService_SubscribeOnClient interface {
	Recv() (*BlockchainEvent, error)
	grpc.ClientStream
}

type blockchainEventsServiceSubscribeOnClient struct {
	grpc.ClientStream
}

func (x *blockchainEventsServiceSubscribeOnClient) Recv() (*BlockchainEvent, error) {
	m := new(BlockchainEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockchainEventsServiceServer is the server API for BlockchainEventsService service.
// All implementations must embed UnimplementedBlockchainEventsServiceServer
// for forward compatibility
type BlockchainEventsServiceServer interface {
	SubscribeOn(*events.SubscribeOnRequest, BlockchainEventsService_SubscribeOnServer) error
	mustEmbedUnimplementedBlockchainEventsServiceServer()
}

// UnimplementedBlockchainEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainEventsServiceServer struct {
}

func (UnimplementedBlockchainEventsServiceServer) SubscribeOn(*events.SubscribeOnRequest, BlockchainEventsService_SubscribeOnServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOn not implemented")
}
func (UnimplementedBlockchainEventsServiceServer) mustEmbedUnimplementedBlockchainEventsServiceServer() {
}

// UnsafeBlockchainEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainEventsServiceServer will
// result in compilation errors.
type UnsafeBlockchainEventsServiceServer interface {
	mustEmbedUnimplementedBlockchainEventsServiceServer()
}

func RegisterBlockchainEventsServiceServer(s grpc.ServiceRegistrar, srv BlockchainEventsServiceServer) {
	s.RegisterService(&BlockchainEventsService_ServiceDesc, srv)
}

func _BlockchainEventsService_SubscribeOn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(events.SubscribeOnRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainEventsServiceServer).SubscribeOn(m, &blockchainEventsServiceSubscribeOnServer{stream})
}

type BlockchainEventsService_SubscribeOnServer interface {
	Send(*BlockchainEvent) error
	grpc.ServerStream
}

type blockchainEventsServiceSubscribeOnServer struct {
	grpc.ServerStream
}

func (x *blockchainEventsServiceSubscribeOnServer) Send(m *BlockchainEvent) error {
	return x.ServerStream.SendMsg(m)
}

// BlockchainEventsService_ServiceDesc is the grpc.ServiceDesc for BlockchainEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.BlockchainEventsService",
	HandlerType: (*BlockchainEventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOn",
			Handler:       _BlockchainEventsService_SubscribeOn_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messagebroker/messagebroker_blockchain_events_service.proto",
}
