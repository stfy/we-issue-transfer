// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: contract/contract_contract_service.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractServiceClient is the client API for ContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractServiceClient interface {
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (ContractService_ConnectClient, error)
	CommitExecutionSuccess(ctx context.Context, in *ExecutionSuccessRequest, opts ...grpc.CallOption) (*CommitExecutionResponse, error)
	CommitExecutionError(ctx context.Context, in *ExecutionErrorRequest, opts ...grpc.CallOption) (*CommitExecutionResponse, error)
	GetContractKeys(ctx context.Context, in *ContractKeysRequest, opts ...grpc.CallOption) (*ContractKeysResponse, error)
	GetContractKey(ctx context.Context, in *ContractKeyRequest, opts ...grpc.CallOption) (*ContractKeyResponse, error)
	GetContractBalances(ctx context.Context, in *ContractBalancesRequest, opts ...grpc.CallOption) (*ContractBalancesResponse, error)
	CalculateAssetId(ctx context.Context, in *CalculateAssetIdRequest, opts ...grpc.CallOption) (*AssetId, error)
}

type contractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractServiceClient(cc grpc.ClientConnInterface) ContractServiceClient {
	return &contractServiceClient{cc}
}

func (c *contractServiceClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (ContractService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContractService_ServiceDesc.Streams[0], "/wavesenterprise.ContractService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContractService_ConnectClient interface {
	Recv() (*ContractTransactionResponse, error)
	grpc.ClientStream
}

type contractServiceConnectClient struct {
	grpc.ClientStream
}

func (x *contractServiceConnectClient) Recv() (*ContractTransactionResponse, error) {
	m := new(ContractTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contractServiceClient) CommitExecutionSuccess(ctx context.Context, in *ExecutionSuccessRequest, opts ...grpc.CallOption) (*CommitExecutionResponse, error) {
	out := new(CommitExecutionResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.ContractService/CommitExecutionSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) CommitExecutionError(ctx context.Context, in *ExecutionErrorRequest, opts ...grpc.CallOption) (*CommitExecutionResponse, error) {
	out := new(CommitExecutionResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.ContractService/CommitExecutionError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) GetContractKeys(ctx context.Context, in *ContractKeysRequest, opts ...grpc.CallOption) (*ContractKeysResponse, error) {
	out := new(ContractKeysResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.ContractService/GetContractKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) GetContractKey(ctx context.Context, in *ContractKeyRequest, opts ...grpc.CallOption) (*ContractKeyResponse, error) {
	out := new(ContractKeyResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.ContractService/GetContractKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) GetContractBalances(ctx context.Context, in *ContractBalancesRequest, opts ...grpc.CallOption) (*ContractBalancesResponse, error) {
	out := new(ContractBalancesResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.ContractService/GetContractBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) CalculateAssetId(ctx context.Context, in *CalculateAssetIdRequest, opts ...grpc.CallOption) (*AssetId, error) {
	out := new(AssetId)
	err := c.cc.Invoke(ctx, "/wavesenterprise.ContractService/CalculateAssetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServiceServer is the server API for ContractService service.
// All implementations must embed UnimplementedContractServiceServer
// for forward compatibility
type ContractServiceServer interface {
	Connect(*ConnectionRequest, ContractService_ConnectServer) error
	CommitExecutionSuccess(context.Context, *ExecutionSuccessRequest) (*CommitExecutionResponse, error)
	CommitExecutionError(context.Context, *ExecutionErrorRequest) (*CommitExecutionResponse, error)
	GetContractKeys(context.Context, *ContractKeysRequest) (*ContractKeysResponse, error)
	GetContractKey(context.Context, *ContractKeyRequest) (*ContractKeyResponse, error)
	GetContractBalances(context.Context, *ContractBalancesRequest) (*ContractBalancesResponse, error)
	CalculateAssetId(context.Context, *CalculateAssetIdRequest) (*AssetId, error)
	mustEmbedUnimplementedContractServiceServer()
}

// UnimplementedContractServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContractServiceServer struct {
}

func (UnimplementedContractServiceServer) Connect(*ConnectionRequest, ContractService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedContractServiceServer) CommitExecutionSuccess(context.Context, *ExecutionSuccessRequest) (*CommitExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitExecutionSuccess not implemented")
}
func (UnimplementedContractServiceServer) CommitExecutionError(context.Context, *ExecutionErrorRequest) (*CommitExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitExecutionError not implemented")
}
func (UnimplementedContractServiceServer) GetContractKeys(context.Context, *ContractKeysRequest) (*ContractKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractKeys not implemented")
}
func (UnimplementedContractServiceServer) GetContractKey(context.Context, *ContractKeyRequest) (*ContractKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractKey not implemented")
}
func (UnimplementedContractServiceServer) GetContractBalances(context.Context, *ContractBalancesRequest) (*ContractBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractBalances not implemented")
}
func (UnimplementedContractServiceServer) CalculateAssetId(context.Context, *CalculateAssetIdRequest) (*AssetId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateAssetId not implemented")
}
func (UnimplementedContractServiceServer) mustEmbedUnimplementedContractServiceServer() {}

// UnsafeContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServiceServer will
// result in compilation errors.
type UnsafeContractServiceServer interface {
	mustEmbedUnimplementedContractServiceServer()
}

func RegisterContractServiceServer(s grpc.ServiceRegistrar, srv ContractServiceServer) {
	s.RegisterService(&ContractService_ServiceDesc, srv)
}

func _ContractService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContractServiceServer).Connect(m, &contractServiceConnectServer{stream})
}

type ContractService_ConnectServer interface {
	Send(*ContractTransactionResponse) error
	grpc.ServerStream
}

type contractServiceConnectServer struct {
	grpc.ServerStream
}

func (x *contractServiceConnectServer) Send(m *ContractTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContractService_CommitExecutionSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).CommitExecutionSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.ContractService/CommitExecutionSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).CommitExecutionSuccess(ctx, req.(*ExecutionSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_CommitExecutionError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).CommitExecutionError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.ContractService/CommitExecutionError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).CommitExecutionError(ctx, req.(*ExecutionErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_GetContractKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).GetContractKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.ContractService/GetContractKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).GetContractKeys(ctx, req.(*ContractKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_GetContractKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).GetContractKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.ContractService/GetContractKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).GetContractKey(ctx, req.(*ContractKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_GetContractBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).GetContractBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.ContractService/GetContractBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).GetContractBalances(ctx, req.(*ContractBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_CalculateAssetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateAssetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).CalculateAssetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.ContractService/CalculateAssetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).CalculateAssetId(ctx, req.(*CalculateAssetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractService_ServiceDesc is the grpc.ServiceDesc for ContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.ContractService",
	HandlerType: (*ContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitExecutionSuccess",
			Handler:    _ContractService_CommitExecutionSuccess_Handler,
		},
		{
			MethodName: "CommitExecutionError",
			Handler:    _ContractService_CommitExecutionError_Handler,
		},
		{
			MethodName: "GetContractKeys",
			Handler:    _ContractService_GetContractKeys_Handler,
		},
		{
			MethodName: "GetContractKey",
			Handler:    _ContractService_GetContractKey_Handler,
		},
		{
			MethodName: "GetContractBalances",
			Handler:    _ContractService_GetContractBalances_Handler,
		},
		{
			MethodName: "CalculateAssetId",
			Handler:    _ContractService_CalculateAssetId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _ContractService_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contract/contract_contract_service.proto",
}
