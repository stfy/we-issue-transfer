// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: contract/contract_address_service.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	GetAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AddressesResponse, error)
	GetAddressData(ctx context.Context, in *AddressDataRequest, opts ...grpc.CallOption) (*AddressDataResponse, error)
	GetAssetBalance(ctx context.Context, in *AssetBalanceRequest, opts ...grpc.CallOption) (*AssetBalanceResponse, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) GetAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AddressesResponse, error) {
	out := new(AddressesResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.AddressService/GetAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressData(ctx context.Context, in *AddressDataRequest, opts ...grpc.CallOption) (*AddressDataResponse, error) {
	out := new(AddressDataResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.AddressService/GetAddressData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAssetBalance(ctx context.Context, in *AssetBalanceRequest, opts ...grpc.CallOption) (*AssetBalanceResponse, error) {
	out := new(AssetBalanceResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.AddressService/GetAssetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility
type AddressServiceServer interface {
	GetAddresses(context.Context, *emptypb.Empty) (*AddressesResponse, error)
	GetAddressData(context.Context, *AddressDataRequest) (*AddressDataResponse, error)
	GetAssetBalance(context.Context, *AssetBalanceRequest) (*AssetBalanceResponse, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (UnimplementedAddressServiceServer) GetAddresses(context.Context, *emptypb.Empty) (*AddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressData(context.Context, *AddressDataRequest) (*AddressDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressData not implemented")
}
func (UnimplementedAddressServiceServer) GetAssetBalance(context.Context, *AssetBalanceRequest) (*AssetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetBalance not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.AddressService/GetAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddresses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.AddressService/GetAddressData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressData(ctx, req.(*AddressDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAssetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAssetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.AddressService/GetAssetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAssetBalance(ctx, req.(*AssetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddresses",
			Handler:    _AddressService_GetAddresses_Handler,
		},
		{
			MethodName: "GetAddressData",
			Handler:    _AddressService_GetAddressData_Handler,
		},
		{
			MethodName: "GetAssetBalance",
			Handler:    _AddressService_GetAssetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/contract_address_service.proto",
}
