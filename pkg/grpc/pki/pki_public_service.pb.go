// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: pki/pki_public_service.proto

package pki

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CertByDNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dn string `protobuf:"bytes,1,opt,name=dn,proto3" json:"dn,omitempty"`
}

func (x *CertByDNRequest) Reset() {
	*x = CertByDNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pki_pki_public_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertByDNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertByDNRequest) ProtoMessage() {}

func (x *CertByDNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pki_pki_public_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertByDNRequest.ProtoReflect.Descriptor instead.
func (*CertByDNRequest) Descriptor() ([]byte, []int) {
	return file_pki_pki_public_service_proto_rawDescGZIP(), []int{0}
}

func (x *CertByDNRequest) GetDn() string {
	if x != nil {
		return x.Dn
	}
	return ""
}

type CertByDNHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnHash string `protobuf:"bytes,1,opt,name=dn_hash,json=dnHash,proto3" json:"dn_hash,omitempty"`
}

func (x *CertByDNHashRequest) Reset() {
	*x = CertByDNHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pki_pki_public_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertByDNHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertByDNHashRequest) ProtoMessage() {}

func (x *CertByDNHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pki_pki_public_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertByDNHashRequest.ProtoReflect.Descriptor instead.
func (*CertByDNHashRequest) Descriptor() ([]byte, []int) {
	return file_pki_pki_public_service_proto_rawDescGZIP(), []int{1}
}

func (x *CertByDNHashRequest) GetDnHash() string {
	if x != nil {
		return x.DnHash
	}
	return ""
}

type CertByPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyBase58 string `protobuf:"bytes,1,opt,name=public_key_base58,json=publicKeyBase58,proto3" json:"public_key_base58,omitempty"`
}

func (x *CertByPublicKeyRequest) Reset() {
	*x = CertByPublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pki_pki_public_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertByPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertByPublicKeyRequest) ProtoMessage() {}

func (x *CertByPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pki_pki_public_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertByPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*CertByPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_pki_pki_public_service_proto_rawDescGZIP(), []int{2}
}

func (x *CertByPublicKeyRequest) GetPublicKeyBase58() string {
	if x != nil {
		return x.PublicKeyBase58
	}
	return ""
}

type CertByFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FingerprintBase64 string `protobuf:"bytes,1,opt,name=fingerprint_base64,json=fingerprintBase64,proto3" json:"fingerprint_base64,omitempty"`
}

func (x *CertByFingerprintRequest) Reset() {
	*x = CertByFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pki_pki_public_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertByFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertByFingerprintRequest) ProtoMessage() {}

func (x *CertByFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pki_pki_public_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertByFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CertByFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_pki_pki_public_service_proto_rawDescGZIP(), []int{3}
}

func (x *CertByFingerprintRequest) GetFingerprintBase64() string {
	if x != nil {
		return x.FingerprintBase64
	}
	return ""
}

type CertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *CertificateResponse) Reset() {
	*x = CertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pki_pki_public_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateResponse) ProtoMessage() {}

func (x *CertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pki_pki_public_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateResponse.ProtoReflect.Descriptor instead.
func (*CertificateResponse) Descriptor() ([]byte, []int) {
	return file_pki_pki_public_service_proto_rawDescGZIP(), []int{4}
}

func (x *CertificateResponse) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

var File_pki_pki_public_service_proto protoreflect.FileDescriptor

var file_pki_pki_public_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x69, 0x2f, 0x70, 0x6b, 0x69, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x77, 0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x42, 0x79, 0x44, 0x4e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x6e, 0x22, 0x2e, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x42,
	0x79, 0x44, 0x4e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x44, 0x0a, 0x16, 0x43, 0x65, 0x72, 0x74, 0x42,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x22, 0x49, 0x0a,
	0x18, 0x43, 0x65, 0x72, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x37, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x32, 0xda, 0x03, 0x0a, 0x10, 0x50, 0x6b, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x6e, 0x12, 0x25, 0x2e, 0x77,
	0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x42, 0x79, 0x44, 0x4e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x44, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x42, 0x79, 0x44, 0x4e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x77, 0x61,
	0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x76, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x42,
	0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51,
	0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6b, 0x69, 0x50, 0x01, 0x5a, 0x11, 0x77, 0x65,
	0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6b, 0x69, 0xaa,
	0x02, 0x0f, 0x57, 0x61, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pki_pki_public_service_proto_rawDescOnce sync.Once
	file_pki_pki_public_service_proto_rawDescData = file_pki_pki_public_service_proto_rawDesc
)

func file_pki_pki_public_service_proto_rawDescGZIP() []byte {
	file_pki_pki_public_service_proto_rawDescOnce.Do(func() {
		file_pki_pki_public_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pki_pki_public_service_proto_rawDescData)
	})
	return file_pki_pki_public_service_proto_rawDescData
}

var file_pki_pki_public_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pki_pki_public_service_proto_goTypes = []interface{}{
	(*CertByDNRequest)(nil),          // 0: wavesenterprise.grpc.CertByDNRequest
	(*CertByDNHashRequest)(nil),      // 1: wavesenterprise.grpc.CertByDNHashRequest
	(*CertByPublicKeyRequest)(nil),   // 2: wavesenterprise.grpc.CertByPublicKeyRequest
	(*CertByFingerprintRequest)(nil), // 3: wavesenterprise.grpc.CertByFingerprintRequest
	(*CertificateResponse)(nil),      // 4: wavesenterprise.grpc.CertificateResponse
}
var file_pki_pki_public_service_proto_depIdxs = []int32{
	0, // 0: wavesenterprise.grpc.PkiPublicService.GetCertificateByDn:input_type -> wavesenterprise.grpc.CertByDNRequest
	1, // 1: wavesenterprise.grpc.PkiPublicService.GetCertificateByDnHash:input_type -> wavesenterprise.grpc.CertByDNHashRequest
	2, // 2: wavesenterprise.grpc.PkiPublicService.GetCertificateByPublicKey:input_type -> wavesenterprise.grpc.CertByPublicKeyRequest
	3, // 3: wavesenterprise.grpc.PkiPublicService.GetCertificateByFingerprint:input_type -> wavesenterprise.grpc.CertByFingerprintRequest
	4, // 4: wavesenterprise.grpc.PkiPublicService.GetCertificateByDn:output_type -> wavesenterprise.grpc.CertificateResponse
	4, // 5: wavesenterprise.grpc.PkiPublicService.GetCertificateByDnHash:output_type -> wavesenterprise.grpc.CertificateResponse
	4, // 6: wavesenterprise.grpc.PkiPublicService.GetCertificateByPublicKey:output_type -> wavesenterprise.grpc.CertificateResponse
	4, // 7: wavesenterprise.grpc.PkiPublicService.GetCertificateByFingerprint:output_type -> wavesenterprise.grpc.CertificateResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pki_pki_public_service_proto_init() }
func file_pki_pki_public_service_proto_init() {
	if File_pki_pki_public_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pki_pki_public_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertByDNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pki_pki_public_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertByDNHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pki_pki_public_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertByPublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pki_pki_public_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertByFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pki_pki_public_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pki_pki_public_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pki_pki_public_service_proto_goTypes,
		DependencyIndexes: file_pki_pki_public_service_proto_depIdxs,
		MessageInfos:      file_pki_pki_public_service_proto_msgTypes,
	}.Build()
	File_pki_pki_public_service_proto = out.File
	file_pki_pki_public_service_proto_rawDesc = nil
	file_pki_pki_public_service_proto_goTypes = nil
	file_pki_pki_public_service_proto_depIdxs = nil
}
