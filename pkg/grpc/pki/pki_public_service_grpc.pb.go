// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pki/pki_public_service.proto

package pki

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PkiPublicServiceClient is the client API for PkiPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PkiPublicServiceClient interface {
	GetCertificateByDn(ctx context.Context, in *CertByDNRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
	GetCertificateByDnHash(ctx context.Context, in *CertByDNHashRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
	GetCertificateByPublicKey(ctx context.Context, in *CertByPublicKeyRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
	GetCertificateByFingerprint(ctx context.Context, in *CertByFingerprintRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
}

type pkiPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPkiPublicServiceClient(cc grpc.ClientConnInterface) PkiPublicServiceClient {
	return &pkiPublicServiceClient{cc}
}

func (c *pkiPublicServiceClient) GetCertificateByDn(ctx context.Context, in *CertByDNRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.PkiPublicService/GetCertificateByDn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkiPublicServiceClient) GetCertificateByDnHash(ctx context.Context, in *CertByDNHashRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.PkiPublicService/GetCertificateByDnHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkiPublicServiceClient) GetCertificateByPublicKey(ctx context.Context, in *CertByPublicKeyRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.PkiPublicService/GetCertificateByPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkiPublicServiceClient) GetCertificateByFingerprint(ctx context.Context, in *CertByFingerprintRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.PkiPublicService/GetCertificateByFingerprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PkiPublicServiceServer is the server API for PkiPublicService service.
// All implementations must embed UnimplementedPkiPublicServiceServer
// for forward compatibility
type PkiPublicServiceServer interface {
	GetCertificateByDn(context.Context, *CertByDNRequest) (*CertificateResponse, error)
	GetCertificateByDnHash(context.Context, *CertByDNHashRequest) (*CertificateResponse, error)
	GetCertificateByPublicKey(context.Context, *CertByPublicKeyRequest) (*CertificateResponse, error)
	GetCertificateByFingerprint(context.Context, *CertByFingerprintRequest) (*CertificateResponse, error)
	mustEmbedUnimplementedPkiPublicServiceServer()
}

// UnimplementedPkiPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPkiPublicServiceServer struct {
}

func (UnimplementedPkiPublicServiceServer) GetCertificateByDn(context.Context, *CertByDNRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByDn not implemented")
}
func (UnimplementedPkiPublicServiceServer) GetCertificateByDnHash(context.Context, *CertByDNHashRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByDnHash not implemented")
}
func (UnimplementedPkiPublicServiceServer) GetCertificateByPublicKey(context.Context, *CertByPublicKeyRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByPublicKey not implemented")
}
func (UnimplementedPkiPublicServiceServer) GetCertificateByFingerprint(context.Context, *CertByFingerprintRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByFingerprint not implemented")
}
func (UnimplementedPkiPublicServiceServer) mustEmbedUnimplementedPkiPublicServiceServer() {}

// UnsafePkiPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PkiPublicServiceServer will
// result in compilation errors.
type UnsafePkiPublicServiceServer interface {
	mustEmbedUnimplementedPkiPublicServiceServer()
}

func RegisterPkiPublicServiceServer(s grpc.ServiceRegistrar, srv PkiPublicServiceServer) {
	s.RegisterService(&PkiPublicService_ServiceDesc, srv)
}

func _PkiPublicService_GetCertificateByDn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertByDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkiPublicServiceServer).GetCertificateByDn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.PkiPublicService/GetCertificateByDn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkiPublicServiceServer).GetCertificateByDn(ctx, req.(*CertByDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PkiPublicService_GetCertificateByDnHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertByDNHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkiPublicServiceServer).GetCertificateByDnHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.PkiPublicService/GetCertificateByDnHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkiPublicServiceServer).GetCertificateByDnHash(ctx, req.(*CertByDNHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PkiPublicService_GetCertificateByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkiPublicServiceServer).GetCertificateByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.PkiPublicService/GetCertificateByPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkiPublicServiceServer).GetCertificateByPublicKey(ctx, req.(*CertByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PkiPublicService_GetCertificateByFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertByFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkiPublicServiceServer).GetCertificateByFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.PkiPublicService/GetCertificateByFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkiPublicServiceServer).GetCertificateByFingerprint(ctx, req.(*CertByFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PkiPublicService_ServiceDesc is the grpc.ServiceDesc for PkiPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PkiPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.grpc.PkiPublicService",
	HandlerType: (*PkiPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificateByDn",
			Handler:    _PkiPublicService_GetCertificateByDn_Handler,
		},
		{
			MethodName: "GetCertificateByDnHash",
			Handler:    _PkiPublicService_GetCertificateByDnHash_Handler,
		},
		{
			MethodName: "GetCertificateByPublicKey",
			Handler:    _PkiPublicService_GetCertificateByPublicKey_Handler,
		},
		{
			MethodName: "GetCertificateByFingerprint",
			Handler:    _PkiPublicService_GetCertificateByFingerprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pki/pki_public_service.proto",
}
