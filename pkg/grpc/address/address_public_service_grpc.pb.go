// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: address/address_public_service.proto

package address

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	entity "wego/pkg/grpc/entity"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressPublicServiceClient is the client API for AddressPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressPublicServiceClient interface {
	GetAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*entity.AddressesResponse, error)
	GetAddressData(ctx context.Context, in *AddressDataRequest, opts ...grpc.CallOption) (*AddressDataResponse, error)
	GetAddressDataByKey(ctx context.Context, in *AddressDataByKeyRequest, opts ...grpc.CallOption) (*AddressDataResponse, error)
}

type addressPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressPublicServiceClient(cc grpc.ClientConnInterface) AddressPublicServiceClient {
	return &addressPublicServiceClient{cc}
}

func (c *addressPublicServiceClient) GetAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*entity.AddressesResponse, error) {
	out := new(entity.AddressesResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.AddressPublicService/GetAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressPublicServiceClient) GetAddressData(ctx context.Context, in *AddressDataRequest, opts ...grpc.CallOption) (*AddressDataResponse, error) {
	out := new(AddressDataResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.AddressPublicService/GetAddressData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressPublicServiceClient) GetAddressDataByKey(ctx context.Context, in *AddressDataByKeyRequest, opts ...grpc.CallOption) (*AddressDataResponse, error) {
	out := new(AddressDataResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.AddressPublicService/GetAddressDataByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressPublicServiceServer is the server API for AddressPublicService service.
// All implementations must embed UnimplementedAddressPublicServiceServer
// for forward compatibility
type AddressPublicServiceServer interface {
	GetAddresses(context.Context, *emptypb.Empty) (*entity.AddressesResponse, error)
	GetAddressData(context.Context, *AddressDataRequest) (*AddressDataResponse, error)
	GetAddressDataByKey(context.Context, *AddressDataByKeyRequest) (*AddressDataResponse, error)
	mustEmbedUnimplementedAddressPublicServiceServer()
}

// UnimplementedAddressPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressPublicServiceServer struct {
}

func (UnimplementedAddressPublicServiceServer) GetAddresses(context.Context, *emptypb.Empty) (*entity.AddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedAddressPublicServiceServer) GetAddressData(context.Context, *AddressDataRequest) (*AddressDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressData not implemented")
}
func (UnimplementedAddressPublicServiceServer) GetAddressDataByKey(context.Context, *AddressDataByKeyRequest) (*AddressDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressDataByKey not implemented")
}
func (UnimplementedAddressPublicServiceServer) mustEmbedUnimplementedAddressPublicServiceServer() {}

// UnsafeAddressPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressPublicServiceServer will
// result in compilation errors.
type UnsafeAddressPublicServiceServer interface {
	mustEmbedUnimplementedAddressPublicServiceServer()
}

func RegisterAddressPublicServiceServer(s grpc.ServiceRegistrar, srv AddressPublicServiceServer) {
	s.RegisterService(&AddressPublicService_ServiceDesc, srv)
}

func _AddressPublicService_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressPublicServiceServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.AddressPublicService/GetAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressPublicServiceServer).GetAddresses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressPublicService_GetAddressData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressPublicServiceServer).GetAddressData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.AddressPublicService/GetAddressData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressPublicServiceServer).GetAddressData(ctx, req.(*AddressDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressPublicService_GetAddressDataByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressDataByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressPublicServiceServer).GetAddressDataByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.AddressPublicService/GetAddressDataByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressPublicServiceServer).GetAddressDataByKey(ctx, req.(*AddressDataByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressPublicService_ServiceDesc is the grpc.ServiceDesc for AddressPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.grpc.AddressPublicService",
	HandlerType: (*AddressPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddresses",
			Handler:    _AddressPublicService_GetAddresses_Handler,
		},
		{
			MethodName: "GetAddressData",
			Handler:    _AddressPublicService_GetAddressData_Handler,
		},
		{
			MethodName: "GetAddressDataByKey",
			Handler:    _AddressPublicService_GetAddressDataByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address/address_public_service.proto",
}
