// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: alias/alias_public_service.proto

package alias

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	entity "wego/pkg/grpc/entity"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AliasPublicServiceClient is the client API for AliasPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AliasPublicServiceClient interface {
	AddressByAlias(ctx context.Context, in *AliasRequest, opts ...grpc.CallOption) (*entity.AddressResponse, error)
	AliasesByAddress(ctx context.Context, in *entity.AddressRequest, opts ...grpc.CallOption) (*AliasesResponse, error)
}

type aliasPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAliasPublicServiceClient(cc grpc.ClientConnInterface) AliasPublicServiceClient {
	return &aliasPublicServiceClient{cc}
}

func (c *aliasPublicServiceClient) AddressByAlias(ctx context.Context, in *AliasRequest, opts ...grpc.CallOption) (*entity.AddressResponse, error) {
	out := new(entity.AddressResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.AliasPublicService/AddressByAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasPublicServiceClient) AliasesByAddress(ctx context.Context, in *entity.AddressRequest, opts ...grpc.CallOption) (*AliasesResponse, error) {
	out := new(AliasesResponse)
	err := c.cc.Invoke(ctx, "/wavesenterprise.grpc.AliasPublicService/AliasesByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliasPublicServiceServer is the server API for AliasPublicService service.
// All implementations must embed UnimplementedAliasPublicServiceServer
// for forward compatibility
type AliasPublicServiceServer interface {
	AddressByAlias(context.Context, *AliasRequest) (*entity.AddressResponse, error)
	AliasesByAddress(context.Context, *entity.AddressRequest) (*AliasesResponse, error)
	mustEmbedUnimplementedAliasPublicServiceServer()
}

// UnimplementedAliasPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAliasPublicServiceServer struct {
}

func (UnimplementedAliasPublicServiceServer) AddressByAlias(context.Context, *AliasRequest) (*entity.AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressByAlias not implemented")
}
func (UnimplementedAliasPublicServiceServer) AliasesByAddress(context.Context, *entity.AddressRequest) (*AliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliasesByAddress not implemented")
}
func (UnimplementedAliasPublicServiceServer) mustEmbedUnimplementedAliasPublicServiceServer() {}

// UnsafeAliasPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AliasPublicServiceServer will
// result in compilation errors.
type UnsafeAliasPublicServiceServer interface {
	mustEmbedUnimplementedAliasPublicServiceServer()
}

func RegisterAliasPublicServiceServer(s grpc.ServiceRegistrar, srv AliasPublicServiceServer) {
	s.RegisterService(&AliasPublicService_ServiceDesc, srv)
}

func _AliasPublicService_AddressByAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasPublicServiceServer).AddressByAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.AliasPublicService/AddressByAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasPublicServiceServer).AddressByAlias(ctx, req.(*AliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasPublicService_AliasesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasPublicServiceServer).AliasesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesenterprise.grpc.AliasPublicService/AliasesByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasPublicServiceServer).AliasesByAddress(ctx, req.(*entity.AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AliasPublicService_ServiceDesc is the grpc.ServiceDesc for AliasPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AliasPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wavesenterprise.grpc.AliasPublicService",
	HandlerType: (*AliasPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressByAlias",
			Handler:    _AliasPublicService_AddressByAlias_Handler,
		},
		{
			MethodName: "AliasesByAddress",
			Handler:    _AliasPublicService_AliasesByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alias/alias_public_service.proto",
}
